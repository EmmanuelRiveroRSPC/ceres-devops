name: Stage-promotion

env:
  IMAGE_NAME: ceres

# Only trigger, when the build workflow succeeded
on:
  workflow_run:
    workflows: ["Dev-Promotion"]
    types:
      - completed
  workflow_dispatch:

jobs:
  Image-promotion:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCP_DEV }}'

      - uses: actions/setup-python@v4
        with:
          python-version: '3.x' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'

      - name: Getting versions
        shell: bash
        run: |
          POM_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "POM_VERSION=${POM_VERSION}" >> $GITHUB_ENV

      - uses: jannekem/run-python-script-action@v1
        with:
          script: |
            pomVersion = "${{ env.POM_VERSION }}".split(".")

            major = pomVersion[0]
            minor = pomVersion[1]
            build = pomVersion[2]

            version = major + '.' + minor + '.' + build

            if int(major) == 0:
              print(f"{version}:")
              print('\033[1m' + "Not a release version, canceling promotion")
            #  exit(1)

            majorVersion = f"{major}.{minor}"

            print ("version detected: {majorVersion}")
            set_env("MAJOR_VERSION", majorVersion)

#      - shell: bash
#        run: | 
#          LATEST_TAG=$(gcloud container images list-tags gcr.io/${{ secrets.GCP_DEV_ACC }}/${IMAGE_NAME} --limit=1 --sort-by=~TIMESTAMP --filter="TAGS=${{ env.MAJOR_VERSION }}")
#          echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV

      - shell: bash
        run: | 
          LATEST_TAG=$(gcloud container images list-tags gcr.io/${{ secrets.GCP_DEV_ACC }}/testdevops --limit=1 --sort-by=~TIMESTAMP --filter="TAGS=${{ env.MAJOR_VERSION }}" --format='table[no-heading](tags)')
          echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV

      - uses: jannekem/run-python-script-action@v1
        with:
          script: |
            latestTag = "${{ env.LATEST_TAG }}"
            newVersion = ""

            if not latestTag:
              print("Found no builds for this version")
              print("generating new build")
              NewVersion = "${{ env.MAJOR_VERSION }}.0"

            else:
              print("found version: ${{ env.LATEST_TAG }}")

              version = latestTag.split(".")

              build = int(version[2]) + 1
              newVersion = f"{version[0]}.{version[1]}.{str(build)}"
            print(newVersion)
            set_env("NEW_VERSION", newVersion)

      - run: echo ${{ env.NEW_VERSION }}
#      - name: Retag
#        run: gcloud container images add-tag gcr.io/${{ secrets.GCP_DEV_ACC }}/testdevops:latest gcr.io/${{ secrets.GCP_DEV_ACC }}/testdevops:$POM_VERSION